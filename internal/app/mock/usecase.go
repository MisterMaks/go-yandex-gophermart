// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/delivery/http.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	app "github.com/MisterMaks/go-yandex-gophermart/internal/app"
	gomock "github.com/golang/mock/gomock"
)

// MockAppUsecaseInterface is a mock of AppUsecaseInterface interface.
type MockAppUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAppUsecaseInterfaceMockRecorder
}

// MockAppUsecaseInterfaceMockRecorder is the mock recorder for MockAppUsecaseInterface.
type MockAppUsecaseInterfaceMockRecorder struct {
	mock *MockAppUsecaseInterface
}

// NewMockAppUsecaseInterface creates a new mock instance.
func NewMockAppUsecaseInterface(ctrl *gomock.Controller) *MockAppUsecaseInterface {
	mock := &MockAppUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockAppUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppUsecaseInterface) EXPECT() *MockAppUsecaseInterfaceMockRecorder {
	return m.recorder
}

// BuildJWTString mocks base method.
func (m *MockAppUsecaseInterface) BuildJWTString(userID uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildJWTString", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildJWTString indicates an expected call of BuildJWTString.
func (mr *MockAppUsecaseInterfaceMockRecorder) BuildJWTString(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildJWTString", reflect.TypeOf((*MockAppUsecaseInterface)(nil).BuildJWTString), userID)
}

// CreateOrder mocks base method.
func (m *MockAppUsecaseInterface) CreateOrder(number string) (*app.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", number)
	ret0, _ := ret[0].(*app.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockAppUsecaseInterfaceMockRecorder) CreateOrder(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockAppUsecaseInterface)(nil).CreateOrder), number)
}

// CreateWithdraw mocks base method.
func (m *MockAppUsecaseInterface) CreateWithdraw(orderNumber string, sum float64) (*app.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdraw", orderNumber, sum)
	ret0, _ := ret[0].(*app.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithdraw indicates an expected call of CreateWithdraw.
func (mr *MockAppUsecaseInterfaceMockRecorder) CreateWithdraw(orderNumber, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdraw", reflect.TypeOf((*MockAppUsecaseInterface)(nil).CreateWithdraw), orderNumber, sum)
}

// GetBalance mocks base method.
func (m *MockAppUsecaseInterface) GetBalance() (*app.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(*app.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockAppUsecaseInterfaceMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockAppUsecaseInterface)(nil).GetBalance))
}

// GetOrders mocks base method.
func (m *MockAppUsecaseInterface) GetOrders() ([]*app.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders")
	ret0, _ := ret[0].([]*app.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockAppUsecaseInterfaceMockRecorder) GetOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockAppUsecaseInterface)(nil).GetOrders))
}

// GetWithdrawals mocks base method.
func (m *MockAppUsecaseInterface) GetWithdrawals() ([]*app.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals")
	ret0, _ := ret[0].([]*app.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockAppUsecaseInterfaceMockRecorder) GetWithdrawals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockAppUsecaseInterface)(nil).GetWithdrawals))
}

// Login mocks base method.
func (m *MockAppUsecaseInterface) Login(login, password string) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", login, password)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAppUsecaseInterfaceMockRecorder) Login(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAppUsecaseInterface)(nil).Login), login, password)
}

// Register mocks base method.
func (m *MockAppUsecaseInterface) Register(login, password string) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", login, password)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAppUsecaseInterfaceMockRecorder) Register(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAppUsecaseInterface)(nil).Register), login, password)
}
